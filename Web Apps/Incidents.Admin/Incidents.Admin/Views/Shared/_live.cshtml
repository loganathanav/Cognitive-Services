@model IEnumerable<Incident>

@if (Model != null && Model.Count() > 0 && Model.Any(incident => (incident.Status == (int)IncidentStatus.Initiated || incident.Status == (int)IncidentStatus.Started || incident.Status == (int)IncidentStatus.Processing)))
{
    <div class="row live-incidents">
        @foreach (var incident in Model.Where(incident => (incident.Status == (int)IncidentStatus.Initiated || incident.Status == (int)IncidentStatus.Started || incident.Status == (int)IncidentStatus.Processing)).OrderByDescending(incident => incident.ReportedOn))
        {
            <div class="row">
                <div class="col-md-9">
                    <h3>@incident.Title</h3>
                    <span>
                        @incident.Location
                    </span>
                </div>
                <div class="col-md-3 zetron-label">
                    <div class="@(incident.Status == (int)IncidentStatus.Initiated ? "visible-item" : "hidden-item")">
                        <button class="btn btn-default" onclick='startStreaming(@Html.Raw(Json.Serialize(incident)));'>Start</button>
                    </div>
                    <div class="@(incident.Status == (int)IncidentStatus.Started ? "visible-item": "hidden-item")">
                        <button class="btn btn-default" disabled="disabled">Started</button>
                    </div>
                    <div class="@(incident.Status == (int)IncidentStatus.Processing ? "visible-item": "hidden-item")">
                        <button class="btn btn-default" onclick='stopProcessing(@Html.Raw(Json.Serialize(incident)));'>End</button>
                    </div>
                </div>
            </div>
            <div class="row hr-row">
                <div class="col-md-12 hr-row">
                </div>
            </div>
        }

    </div>
}